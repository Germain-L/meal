This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-07T10:02:01.975Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
src/
  lib/
    api-client/
      .openapi-generator/
        FILES
        VERSION
      apis/
        AuthenticationApi.ts
        index.ts
        SystemApi.ts
        UserApi.ts
      models/
        HealthResponse.ts
        index.ts
        LoginPost401Response.ts
        LoginPost500Response.ts
        LoginRequest.ts
        ModelError.ts
        PingResponse.ts
        RefreshPost200Response.ts
        RefreshPost401Response.ts
        RefreshRequest.ts
        SignupPost400Response.ts
        SignupPost500Response.ts
        SignupRequest.ts
        TokenResponse.ts
        User.ts
        UserGet401Response.ts
        UserGet500Response.ts
      .openapi-generator-ignore
      index.ts
      runtime.ts
    api.ts
    index.ts
  routes/
    auth/
      +page.svelte
      +page.ts
    +layout.svelte
    +page.svelte
    +page.ts
  app.css
  app.d.ts
  app.html
.dockerignore
.gitignore
.npmrc
.prettierignore
.prettierrc
eslint.config.js
openapitools.json
package.json
postcss.config.js
README.md
svelte.config.js
tailwind.config.ts
tsconfig.json
vite.config.ts

================================================================
Repository Files
================================================================

================
File: src/lib/api-client/.openapi-generator/FILES
================
apis/AuthenticationApi.ts
apis/SystemApi.ts
apis/UserApi.ts
apis/index.ts
index.ts
models/HealthResponse.ts
models/LoginPost401Response.ts
models/LoginPost500Response.ts
models/LoginRequest.ts
models/ModelError.ts
models/PingResponse.ts
models/RefreshPost200Response.ts
models/RefreshPost401Response.ts
models/RefreshRequest.ts
models/SignupPost400Response.ts
models/SignupPost500Response.ts
models/SignupRequest.ts
models/User.ts
models/UserGet401Response.ts
models/UserGet500Response.ts
models/index.ts
runtime.ts

================
File: src/lib/api-client/.openapi-generator/VERSION
================
7.9.0

================
File: src/lib/api-client/apis/AuthenticationApi.ts
================
/* tslint:disable */
/* eslint-disable */
/**
 * Meals API
 * API for managing user accounts and authentication for the Meals service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginPost401Response,
  LoginPost500Response,
  LoginRequest,
  RefreshPost200Response,
  RefreshPost401Response,
  RefreshRequest,
  SignupPost400Response,
  SignupPost500Response,
  SignupRequest,
  User,
} from '../models/index';
import {
    LoginPost401ResponseFromJSON,
    LoginPost401ResponseToJSON,
    LoginPost500ResponseFromJSON,
    LoginPost500ResponseToJSON,
    LoginRequestFromJSON,
    LoginRequestToJSON,
    RefreshPost200ResponseFromJSON,
    RefreshPost200ResponseToJSON,
    RefreshPost401ResponseFromJSON,
    RefreshPost401ResponseToJSON,
    RefreshRequestFromJSON,
    RefreshRequestToJSON,
    SignupPost400ResponseFromJSON,
    SignupPost400ResponseToJSON,
    SignupPost500ResponseFromJSON,
    SignupPost500ResponseToJSON,
    SignupRequestFromJSON,
    SignupRequestToJSON,
    UserFromJSON,
    UserToJSON,
} from '../models/index';

export interface LoginPostRequest {
    loginRequest: LoginRequest;
}

export interface RefreshPostRequest {
    refreshRequest: RefreshRequest;
}

export interface SignupPostRequest {
    signupRequest: SignupRequest;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * Authenticate user and get tokens
     */
    async loginPostRaw(requestParameters: LoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['loginRequest'] == null) {
            throw new runtime.RequiredError(
                'loginRequest',
                'Required parameter "loginRequest" was null or undefined when calling loginPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters['loginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Authenticate user and get tokens
     */
    async loginPost(requestParameters: LoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.loginPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get new access token using refresh token
     */
    async refreshPostRaw(requestParameters: RefreshPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefreshPost200Response>> {
        if (requestParameters['refreshRequest'] == null) {
            throw new runtime.RequiredError(
                'refreshRequest',
                'Required parameter "refreshRequest" was null or undefined when calling refreshPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshRequestToJSON(requestParameters['refreshRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefreshPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Get new access token using refresh token
     */
    async refreshPost(requestParameters: RefreshPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefreshPost200Response> {
        const response = await this.refreshPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new user account
     */
    async signupPostRaw(requestParameters: SignupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['signupRequest'] == null) {
            throw new runtime.RequiredError(
                'signupRequest',
                'Required parameter "signupRequest" was null or undefined when calling signupPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignupRequestToJSON(requestParameters['signupRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Create a new user account
     */
    async signupPost(requestParameters: SignupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.signupPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

================
File: src/lib/api-client/apis/index.ts
================
/* tslint:disable */
/* eslint-disable */
export * from './AuthenticationApi';
export * from './SystemApi';
export * from './UserApi';

================
File: src/lib/api-client/apis/SystemApi.ts
================
/* tslint:disable */
/* eslint-disable */
/**
 * Meals API
 * API for managing user accounts and authentication for the Meals service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HealthResponse,
  PingResponse,
} from '../models/index';
import {
    HealthResponseFromJSON,
    HealthResponseToJSON,
    PingResponseFromJSON,
    PingResponseToJSON,
} from '../models/index';

/**
 * 
 */
export class SystemApi extends runtime.BaseAPI {

    /**
     * Check service health
     */
    async healthzGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/healthz`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthResponseFromJSON(jsonValue));
    }

    /**
     * Check service health
     */
    async healthzGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthResponse> {
        const response = await this.healthzGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Simple ping endpoint
     */
    async pingGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PingResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ping`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PingResponseFromJSON(jsonValue));
    }

    /**
     * Simple ping endpoint
     */
    async pingGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PingResponse> {
        const response = await this.pingGetRaw(initOverrides);
        return await response.value();
    }

}

================
File: src/lib/api-client/apis/UserApi.ts
================
/* tslint:disable */
/* eslint-disable */
/**
 * Meals API
 * API for managing user accounts and authentication for the Meals service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  User,
  UserGet401Response,
  UserGet500Response,
} from '../models/index';
import {
    UserFromJSON,
    UserToJSON,
    UserGet401ResponseFromJSON,
    UserGet401ResponseToJSON,
    UserGet500ResponseFromJSON,
    UserGet500ResponseToJSON,
} from '../models/index';

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * Get current user account details
     */
    async userGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Get current user account details
     */
    async userGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.userGetRaw(initOverrides);
        return await response.value();
    }

}

================
File: src/lib/api-client/models/HealthResponse.ts
================
/* tslint:disable */
/* eslint-disable */
/**
 * Meals API
 * API for managing user accounts and authentication for the Meals service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface HealthResponse
 */
export interface HealthResponse {
    /**
     * 
     * @type {string}
     * @memberof HealthResponse
     */
    status?: HealthResponseStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof HealthResponse
     */
    error?: string;
}


/**
 * @export
 */
export const HealthResponseStatusEnum = {
    Healthy: 'healthy',
    Unhealthy: 'unhealthy'
} as const;
export type HealthResponseStatusEnum = typeof HealthResponseStatusEnum[keyof typeof HealthResponseStatusEnum];


/**
 * Check if a given object implements the HealthResponse interface.
 */
export function instanceOfHealthResponse(value: object): value is HealthResponse {
    return true;
}

export function HealthResponseFromJSON(json: any): HealthResponse {
    return HealthResponseFromJSONTyped(json, false);
}

export function HealthResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): HealthResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'status': json['status'] == null ? undefined : json['status'],
        'error': json['error'] == null ? undefined : json['error'],
    };
}

  export function HealthResponseToJSON(json: any): HealthResponse {
      return HealthResponseToJSONTyped(json, false);
  }

  export function HealthResponseToJSONTyped(value?: HealthResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'status': value['status'],
        'error': value['error'],
    };
}

================
File: src/lib/api-client/models/index.ts
================
/* tslint:disable */
/* eslint-disable */
export * from './HealthResponse';
export * from './LoginPost401Response';
export * from './LoginPost500Response';
export * from './LoginRequest';
export * from './ModelError';
export * from './PingResponse';
export * from './RefreshPost200Response';
export * from './RefreshPost401Response';
export * from './RefreshRequest';
export * from './SignupPost400Response';
export * from './SignupPost500Response';
export * from './SignupRequest';
export * from './User';
export * from './UserGet401Response';
export * from './UserGet500Response';

================
File: src/lib/api-client/models/LoginPost401Response.ts
================
/* tslint:disable */
/* eslint-disable */
/**
 * Meals API
 * API for managing user accounts and authentication for the Meals service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LoginPost401Response
 */
export interface LoginPost401Response {
    /**
     * 
     * @type {string}
     * @memberof LoginPost401Response
     */
    error?: LoginPost401ResponseErrorEnum;
}


/**
 * @export
 */
export const LoginPost401ResponseErrorEnum = {
    UserNotFound: 'User not found',
    InvalidCredentials: 'Invalid credentials'
} as const;
export type LoginPost401ResponseErrorEnum = typeof LoginPost401ResponseErrorEnum[keyof typeof LoginPost401ResponseErrorEnum];


/**
 * Check if a given object implements the LoginPost401Response interface.
 */
export function instanceOfLoginPost401Response(value: object): value is LoginPost401Response {
    return true;
}

export function LoginPost401ResponseFromJSON(json: any): LoginPost401Response {
    return LoginPost401ResponseFromJSONTyped(json, false);
}

export function LoginPost401ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): LoginPost401Response {
    if (json == null) {
        return json;
    }
    return {
        
        'error': json['error'] == null ? undefined : json['error'],
    };
}

  export function LoginPost401ResponseToJSON(json: any): LoginPost401Response {
      return LoginPost401ResponseToJSONTyped(json, false);
  }

  export function LoginPost401ResponseToJSONTyped(value?: LoginPost401Response | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'error': value['error'],
    };
}

================
File: src/lib/api-client/models/LoginPost500Response.ts
================
/* tslint:disable */
/* eslint-disable */
/**
 * Meals API
 * API for managing user accounts and authentication for the Meals service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LoginPost500Response
 */
export interface LoginPost500Response {
    /**
     * 
     * @type {string}
     * @memberof LoginPost500Response
     */
    error?: LoginPost500ResponseErrorEnum;
}


/**
 * @export
 */
export const LoginPost500ResponseErrorEnum = {
    AccessToken: 'Could not generate access token',
    RefreshToken: 'Could not generate refresh token'
} as const;
export type LoginPost500ResponseErrorEnum = typeof LoginPost500ResponseErrorEnum[keyof typeof LoginPost500ResponseErrorEnum];


/**
 * Check if a given object implements the LoginPost500Response interface.
 */
export function instanceOfLoginPost500Response(value: object): value is LoginPost500Response {
    return true;
}

export function LoginPost500ResponseFromJSON(json: any): LoginPost500Response {
    return LoginPost500ResponseFromJSONTyped(json, false);
}

export function LoginPost500ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): LoginPost500Response {
    if (json == null) {
        return json;
    }
    return {
        
        'error': json['error'] == null ? undefined : json['error'],
    };
}

  export function LoginPost500ResponseToJSON(json: any): LoginPost500Response {
      return LoginPost500ResponseToJSONTyped(json, false);
  }

  export function LoginPost500ResponseToJSONTyped(value?: LoginPost500Response | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'error': value['error'],
    };
}

================
File: src/lib/api-client/models/LoginRequest.ts
================
/* tslint:disable */
/* eslint-disable */
/**
 * Meals API
 * API for managing user accounts and authentication for the Meals service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    password: string;
}

/**
 * Check if a given object implements the LoginRequest interface.
 */
export function instanceOfLoginRequest(value: object): value is LoginRequest {
    if (!('username' in value) || value['username'] === undefined) return false;
    if (!('password' in value) || value['password'] === undefined) return false;
    return true;
}

export function LoginRequestFromJSON(json: any): LoginRequest {
    return LoginRequestFromJSONTyped(json, false);
}

export function LoginRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): LoginRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'username': json['username'],
        'password': json['password'],
    };
}

  export function LoginRequestToJSON(json: any): LoginRequest {
      return LoginRequestToJSONTyped(json, false);
  }

  export function LoginRequestToJSONTyped(value?: LoginRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'username': value['username'],
        'password': value['password'],
    };
}

================
File: src/lib/api-client/models/ModelError.ts
================
/* tslint:disable */
/* eslint-disable */
/**
 * Meals API
 * API for managing user accounts and authentication for the Meals service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * Error message describing what went wrong
     * @type {string}
     * @memberof ModelError
     */
    error?: string;
}

/**
 * Check if a given object implements the ModelError interface.
 */
export function instanceOfModelError(value: object): value is ModelError {
    return true;
}

export function ModelErrorFromJSON(json: any): ModelError {
    return ModelErrorFromJSONTyped(json, false);
}

export function ModelErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelError {
    if (json == null) {
        return json;
    }
    return {
        
        'error': json['error'] == null ? undefined : json['error'],
    };
}

  export function ModelErrorToJSON(json: any): ModelError {
      return ModelErrorToJSONTyped(json, false);
  }

  export function ModelErrorToJSONTyped(value?: ModelError | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'error': value['error'],
    };
}

================
File: src/lib/api-client/models/PingResponse.ts
================
/* tslint:disable */
/* eslint-disable */
/**
 * Meals API
 * API for managing user accounts and authentication for the Meals service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PingResponse
 */
export interface PingResponse {
    /**
     * 
     * @type {string}
     * @memberof PingResponse
     */
    message?: string;
}

/**
 * Check if a given object implements the PingResponse interface.
 */
export function instanceOfPingResponse(value: object): value is PingResponse {
    return true;
}

export function PingResponseFromJSON(json: any): PingResponse {
    return PingResponseFromJSONTyped(json, false);
}

export function PingResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PingResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'message': json['message'] == null ? undefined : json['message'],
    };
}

  export function PingResponseToJSON(json: any): PingResponse {
      return PingResponseToJSONTyped(json, false);
  }

  export function PingResponseToJSONTyped(value?: PingResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'message': value['message'],
    };
}

================
File: src/lib/api-client/models/RefreshPost200Response.ts
================
/* tslint:disable */
/* eslint-disable */
/**
 * Meals API
 * API for managing user accounts and authentication for the Meals service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RefreshPost200Response
 */
export interface RefreshPost200Response {
    /**
     * 
     * @type {string}
     * @memberof RefreshPost200Response
     */
    accessToken?: string;
}

/**
 * Check if a given object implements the RefreshPost200Response interface.
 */
export function instanceOfRefreshPost200Response(value: object): value is RefreshPost200Response {
    return true;
}

export function RefreshPost200ResponseFromJSON(json: any): RefreshPost200Response {
    return RefreshPost200ResponseFromJSONTyped(json, false);
}

export function RefreshPost200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): RefreshPost200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'accessToken': json['access_token'] == null ? undefined : json['access_token'],
    };
}

  export function RefreshPost200ResponseToJSON(json: any): RefreshPost200Response {
      return RefreshPost200ResponseToJSONTyped(json, false);
  }

  export function RefreshPost200ResponseToJSONTyped(value?: RefreshPost200Response | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'access_token': value['accessToken'],
    };
}

================
File: src/lib/api-client/models/RefreshPost401Response.ts
================
/* tslint:disable */
/* eslint-disable */
/**
 * Meals API
 * API for managing user accounts and authentication for the Meals service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RefreshPost401Response
 */
export interface RefreshPost401Response {
    /**
     * 
     * @type {string}
     * @memberof RefreshPost401Response
     */
    error?: RefreshPost401ResponseErrorEnum;
}


/**
 * @export
 */
export const RefreshPost401ResponseErrorEnum = {
    RefreshToken: 'Invalid refresh token',
    TokenClaims: 'Invalid token claims'
} as const;
export type RefreshPost401ResponseErrorEnum = typeof RefreshPost401ResponseErrorEnum[keyof typeof RefreshPost401ResponseErrorEnum];


/**
 * Check if a given object implements the RefreshPost401Response interface.
 */
export function instanceOfRefreshPost401Response(value: object): value is RefreshPost401Response {
    return true;
}

export function RefreshPost401ResponseFromJSON(json: any): RefreshPost401Response {
    return RefreshPost401ResponseFromJSONTyped(json, false);
}

export function RefreshPost401ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): RefreshPost401Response {
    if (json == null) {
        return json;
    }
    return {
        
        'error': json['error'] == null ? undefined : json['error'],
    };
}

  export function RefreshPost401ResponseToJSON(json: any): RefreshPost401Response {
      return RefreshPost401ResponseToJSONTyped(json, false);
  }

  export function RefreshPost401ResponseToJSONTyped(value?: RefreshPost401Response | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'error': value['error'],
    };
}

================
File: src/lib/api-client/models/RefreshRequest.ts
================
/* tslint:disable */
/* eslint-disable */
/**
 * Meals API
 * API for managing user accounts and authentication for the Meals service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RefreshRequest
 */
export interface RefreshRequest {
    /**
     * 
     * @type {string}
     * @memberof RefreshRequest
     */
    refreshToken: string;
}

/**
 * Check if a given object implements the RefreshRequest interface.
 */
export function instanceOfRefreshRequest(value: object): value is RefreshRequest {
    if (!('refreshToken' in value) || value['refreshToken'] === undefined) return false;
    return true;
}

export function RefreshRequestFromJSON(json: any): RefreshRequest {
    return RefreshRequestFromJSONTyped(json, false);
}

export function RefreshRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RefreshRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'refreshToken': json['refresh_token'],
    };
}

  export function RefreshRequestToJSON(json: any): RefreshRequest {
      return RefreshRequestToJSONTyped(json, false);
  }

  export function RefreshRequestToJSONTyped(value?: RefreshRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'refresh_token': value['refreshToken'],
    };
}

================
File: src/lib/api-client/models/SignupPost400Response.ts
================
/* tslint:disable */
/* eslint-disable */
/**
 * Meals API
 * API for managing user accounts and authentication for the Meals service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SignupPost400Response
 */
export interface SignupPost400Response {
    /**
     * 
     * @type {string}
     * @memberof SignupPost400Response
     */
    error?: string;
}

/**
 * Check if a given object implements the SignupPost400Response interface.
 */
export function instanceOfSignupPost400Response(value: object): value is SignupPost400Response {
    return true;
}

export function SignupPost400ResponseFromJSON(json: any): SignupPost400Response {
    return SignupPost400ResponseFromJSONTyped(json, false);
}

export function SignupPost400ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): SignupPost400Response {
    if (json == null) {
        return json;
    }
    return {
        
        'error': json['error'] == null ? undefined : json['error'],
    };
}

  export function SignupPost400ResponseToJSON(json: any): SignupPost400Response {
      return SignupPost400ResponseToJSONTyped(json, false);
  }

  export function SignupPost400ResponseToJSONTyped(value?: SignupPost400Response | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'error': value['error'],
    };
}

================
File: src/lib/api-client/models/SignupPost500Response.ts
================
/* tslint:disable */
/* eslint-disable */
/**
 * Meals API
 * API for managing user accounts and authentication for the Meals service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SignupPost500Response
 */
export interface SignupPost500Response {
    /**
     * 
     * @type {string}
     * @memberof SignupPost500Response
     */
    error?: string;
}

/**
 * Check if a given object implements the SignupPost500Response interface.
 */
export function instanceOfSignupPost500Response(value: object): value is SignupPost500Response {
    return true;
}

export function SignupPost500ResponseFromJSON(json: any): SignupPost500Response {
    return SignupPost500ResponseFromJSONTyped(json, false);
}

export function SignupPost500ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): SignupPost500Response {
    if (json == null) {
        return json;
    }
    return {
        
        'error': json['error'] == null ? undefined : json['error'],
    };
}

  export function SignupPost500ResponseToJSON(json: any): SignupPost500Response {
      return SignupPost500ResponseToJSONTyped(json, false);
  }

  export function SignupPost500ResponseToJSONTyped(value?: SignupPost500Response | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'error': value['error'],
    };
}

================
File: src/lib/api-client/models/SignupRequest.ts
================
/* tslint:disable */
/* eslint-disable */
/**
 * Meals API
 * API for managing user accounts and authentication for the Meals service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SignupRequest
 */
export interface SignupRequest {
    /**
     * 
     * @type {string}
     * @memberof SignupRequest
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof SignupRequest
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof SignupRequest
     */
    password: string;
}

/**
 * Check if a given object implements the SignupRequest interface.
 */
export function instanceOfSignupRequest(value: object): value is SignupRequest {
    if (!('username' in value) || value['username'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('password' in value) || value['password'] === undefined) return false;
    return true;
}

export function SignupRequestFromJSON(json: any): SignupRequest {
    return SignupRequestFromJSONTyped(json, false);
}

export function SignupRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SignupRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'username': json['username'],
        'email': json['email'],
        'password': json['password'],
    };
}

  export function SignupRequestToJSON(json: any): SignupRequest {
      return SignupRequestToJSONTyped(json, false);
  }

  export function SignupRequestToJSONTyped(value?: SignupRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'username': value['username'],
        'email': value['email'],
        'password': value['password'],
    };
}

================
File: src/lib/api-client/models/TokenResponse.ts
================
/* tslint:disable */
/* eslint-disable */
/**
 * Meals API
 * API for managing user accounts and authentication for the Meals service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TokenResponse
 */
export interface TokenResponse {
    /**
     * 
     * @type {string}
     * @memberof TokenResponse
     */
    accessToken?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenResponse
     */
    refreshToken?: string;
}

/**
 * Check if a given object implements the TokenResponse interface.
 */
export function instanceOfTokenResponse(value: object): value is TokenResponse {
    return true;
}

export function TokenResponseFromJSON(json: any): TokenResponse {
    return TokenResponseFromJSONTyped(json, false);
}

export function TokenResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TokenResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'accessToken': json['access_token'] == null ? undefined : json['access_token'],
        'refreshToken': json['refresh_token'] == null ? undefined : json['refresh_token'],
    };
}

  export function TokenResponseToJSON(json: any): TokenResponse {
      return TokenResponseToJSONTyped(json, false);
  }

  export function TokenResponseToJSONTyped(value?: TokenResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'access_token': value['accessToken'],
        'refresh_token': value['refreshToken'],
    };
}

================
File: src/lib/api-client/models/User.ts
================
/* tslint:disable */
/* eslint-disable */
/**
 * Meals API
 * API for managing user accounts and authentication for the Meals service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    createdAt: Date;
}

/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): value is User {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('username' in value) || value['username'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    return true;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'username': json['username'],
        'email': json['email'],
        'createdAt': (new Date(json['created_at'])),
    };
}

  export function UserToJSON(json: any): User {
      return UserToJSONTyped(json, false);
  }

  export function UserToJSONTyped(value?: User | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'username': value['username'],
        'email': value['email'],
        'created_at': ((value['createdAt']).toISOString()),
    };
}

================
File: src/lib/api-client/models/UserGet401Response.ts
================
/* tslint:disable */
/* eslint-disable */
/**
 * Meals API
 * API for managing user accounts and authentication for the Meals service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserGet401Response
 */
export interface UserGet401Response {
    /**
     * 
     * @type {string}
     * @memberof UserGet401Response
     */
    error?: UserGet401ResponseErrorEnum;
}


/**
 * @export
 */
export const UserGet401ResponseErrorEnum = {
    MissingAuthorizationHeader: 'Missing Authorization header',
    InvalidToken: 'Invalid token'
} as const;
export type UserGet401ResponseErrorEnum = typeof UserGet401ResponseErrorEnum[keyof typeof UserGet401ResponseErrorEnum];


/**
 * Check if a given object implements the UserGet401Response interface.
 */
export function instanceOfUserGet401Response(value: object): value is UserGet401Response {
    return true;
}

export function UserGet401ResponseFromJSON(json: any): UserGet401Response {
    return UserGet401ResponseFromJSONTyped(json, false);
}

export function UserGet401ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserGet401Response {
    if (json == null) {
        return json;
    }
    return {
        
        'error': json['error'] == null ? undefined : json['error'],
    };
}

  export function UserGet401ResponseToJSON(json: any): UserGet401Response {
      return UserGet401ResponseToJSONTyped(json, false);
  }

  export function UserGet401ResponseToJSONTyped(value?: UserGet401Response | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'error': value['error'],
    };
}

================
File: src/lib/api-client/models/UserGet500Response.ts
================
/* tslint:disable */
/* eslint-disable */
/**
 * Meals API
 * API for managing user accounts and authentication for the Meals service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserGet500Response
 */
export interface UserGet500Response {
    /**
     * 
     * @type {string}
     * @memberof UserGet500Response
     */
    error?: string;
}

/**
 * Check if a given object implements the UserGet500Response interface.
 */
export function instanceOfUserGet500Response(value: object): value is UserGet500Response {
    return true;
}

export function UserGet500ResponseFromJSON(json: any): UserGet500Response {
    return UserGet500ResponseFromJSONTyped(json, false);
}

export function UserGet500ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserGet500Response {
    if (json == null) {
        return json;
    }
    return {
        
        'error': json['error'] == null ? undefined : json['error'],
    };
}

  export function UserGet500ResponseToJSON(json: any): UserGet500Response {
      return UserGet500ResponseToJSONTyped(json, false);
  }

  export function UserGet500ResponseToJSONTyped(value?: UserGet500Response | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'error': value['error'],
    };
}

================
File: src/lib/api-client/.openapi-generator-ignore
================
# OpenAPI Generator Ignore
# Generated by openapi-generator https://github.com/openapitools/openapi-generator

# Use this file to prevent files from being overwritten by the generator.
# The patterns follow closely to .gitignore or .dockerignore.

# As an example, the C# client generator defines ApiClient.cs.
# You can make changes and tell OpenAPI Generator to ignore just this file by uncommenting the following line:
#ApiClient.cs

# You can match any string of characters against a directory, file or extension with a single asterisk (*):
#foo/*/qux
# The above matches foo/bar/qux and foo/baz/qux, but not foo/bar/baz/qux

# You can recursively match patterns against a directory, file or extension with a double asterisk (**):
#foo/**/qux
# This matches foo/bar/qux, foo/baz/qux, and foo/bar/baz/qux

# You can also negate patterns with an exclamation (!).
# For example, you can ignore all files in a docs folder with the file extension .md:
#docs/*.md
# Then explicitly reverse the ignore rule for a single file:
#!docs/README.md

================
File: src/lib/api-client/index.ts
================
/* tslint:disable */
/* eslint-disable */
export * from './runtime';
export * from './apis/index';
export * from './models/index';

================
File: src/lib/api-client/runtime.ts
================
/* tslint:disable */
/* eslint-disable */
/**
 * Meals API
 * API for managing user accounts and authentication for the Meals service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export const BASE_PATH = "https://meal-production.up.railway.app".replace(/\/+$/, "");

export interface ConfigurationParameters {
    basePath?: string; // override base path
    fetchApi?: FetchAPI; // override for fetch implementation
    middleware?: Middleware[]; // middleware to apply before/after fetch requests
    queryParamsStringify?: (params: HTTPQuery) => string; // stringify function for query strings
    username?: string; // parameter for basic security
    password?: string; // parameter for basic security
    apiKey?: string | Promise<string> | ((name: string) => string | Promise<string>); // parameter for apiKey security
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string | Promise<string>); // parameter for oauth2 security
    headers?: HTTPHeaders; //header params we want to use on every request
    credentials?: RequestCredentials; //value for the credentials param we want to use on each request
}

export class Configuration {
    constructor(private configuration: ConfigurationParameters = {}) {}

    set config(configuration: Configuration) {
        this.configuration = configuration;
    }

    get basePath(): string {
        return this.configuration.basePath != null ? this.configuration.basePath : BASE_PATH;
    }

    get fetchApi(): FetchAPI | undefined {
        return this.configuration.fetchApi;
    }

    get middleware(): Middleware[] {
        return this.configuration.middleware || [];
    }

    get queryParamsStringify(): (params: HTTPQuery) => string {
        return this.configuration.queryParamsStringify || querystring;
    }

    get username(): string | undefined {
        return this.configuration.username;
    }

    get password(): string | undefined {
        return this.configuration.password;
    }

    get apiKey(): ((name: string) => string | Promise<string>) | undefined {
        const apiKey = this.configuration.apiKey;
        if (apiKey) {
            return typeof apiKey === 'function' ? apiKey : () => apiKey;
        }
        return undefined;
    }

    get accessToken(): ((name?: string, scopes?: string[]) => string | Promise<string>) | undefined {
        const accessToken = this.configuration.accessToken;
        if (accessToken) {
            return typeof accessToken === 'function' ? accessToken : async () => accessToken;
        }
        return undefined;
    }

    get headers(): HTTPHeaders | undefined {
        return this.configuration.headers;
    }

    get credentials(): RequestCredentials | undefined {
        return this.configuration.credentials;
    }
}

export const DefaultConfig = new Configuration();

/**
 * This is the base class for all generated API classes.
 */
export class BaseAPI {

    private static readonly jsonRegex = new RegExp('^(:?application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(:?;.*)?$', 'i');
    private middleware: Middleware[];

    constructor(protected configuration = DefaultConfig) {
        this.middleware = configuration.middleware;
    }

    withMiddleware<T extends BaseAPI>(this: T, ...middlewares: Middleware[]) {
        const next = this.clone<T>();
        next.middleware = next.middleware.concat(...middlewares);
        return next;
    }

    withPreMiddleware<T extends BaseAPI>(this: T, ...preMiddlewares: Array<Middleware['pre']>) {
        const middlewares = preMiddlewares.map((pre) => ({ pre }));
        return this.withMiddleware<T>(...middlewares);
    }

    withPostMiddleware<T extends BaseAPI>(this: T, ...postMiddlewares: Array<Middleware['post']>) {
        const middlewares = postMiddlewares.map((post) => ({ post }));
        return this.withMiddleware<T>(...middlewares);
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    protected isJsonMime(mime: string | null | undefined): boolean {
        if (!mime) {
            return false;
        }
        return BaseAPI.jsonRegex.test(mime);
    }

    protected async request(context: RequestOpts, initOverrides?: RequestInit | InitOverrideFunction): Promise<Response> {
        const { url, init } = await this.createFetchParams(context, initOverrides);
        const response = await this.fetchApi(url, init);
        if (response && (response.status >= 200 && response.status < 300)) {
            return response;
        }
        throw new ResponseError(response, 'Response returned an error code');
    }

    private async createFetchParams(context: RequestOpts, initOverrides?: RequestInit | InitOverrideFunction) {
        let url = this.configuration.basePath + context.path;
        if (context.query !== undefined && Object.keys(context.query).length !== 0) {
            // only add the querystring to the URL if there are query parameters.
            // this is done to avoid urls ending with a "?" character which buggy webservers
            // do not handle correctly sometimes.
            url += '?' + this.configuration.queryParamsStringify(context.query);
        }

        const headers = Object.assign({}, this.configuration.headers, context.headers);
        Object.keys(headers).forEach(key => headers[key] === undefined ? delete headers[key] : {});

        const initOverrideFn =
            typeof initOverrides === "function"
                ? initOverrides
                : async () => initOverrides;

        const initParams = {
            method: context.method,
            headers,
            body: context.body,
            credentials: this.configuration.credentials,
        };

        const overriddenInit: RequestInit = {
            ...initParams,
            ...(await initOverrideFn({
                init: initParams,
                context,
            }))
        };

        let body: any;
        if (isFormData(overriddenInit.body)
            || (overriddenInit.body instanceof URLSearchParams)
            || isBlob(overriddenInit.body)) {
          body = overriddenInit.body;
        } else if (this.isJsonMime(headers['Content-Type'])) {
          body = JSON.stringify(overriddenInit.body);
        } else {
          body = overriddenInit.body;
        }

        const init: RequestInit = {
            ...overriddenInit,
            body
        };

        return { url, init };
    }

    private fetchApi = async (url: string, init: RequestInit) => {
        let fetchParams = { url, init };
        for (const middleware of this.middleware) {
            if (middleware.pre) {
                fetchParams = await middleware.pre({
                    fetch: this.fetchApi,
                    ...fetchParams,
                }) || fetchParams;
            }
        }
        let response: Response | undefined = undefined;
        try {
            response = await (this.configuration.fetchApi || fetch)(fetchParams.url, fetchParams.init);
        } catch (e) {
            for (const middleware of this.middleware) {
                if (middleware.onError) {
                    response = await middleware.onError({
                        fetch: this.fetchApi,
                        url: fetchParams.url,
                        init: fetchParams.init,
                        error: e,
                        response: response ? response.clone() : undefined,
                    }) || response;
                }
            }
            if (response === undefined) {
              if (e instanceof Error) {
                throw new FetchError(e, 'The request failed and the interceptors did not return an alternative response');
              } else {
                throw e;
              }
            }
        }
        for (const middleware of this.middleware) {
            if (middleware.post) {
                response = await middleware.post({
                    fetch: this.fetchApi,
                    url: fetchParams.url,
                    init: fetchParams.init,
                    response: response.clone(),
                }) || response;
            }
        }
        return response;
    }

    /**
     * Create a shallow clone of `this` by constructing a new instance
     * and then shallow cloning data members.
     */
    private clone<T extends BaseAPI>(this: T): T {
        const constructor = this.constructor as any;
        const next = new constructor(this.configuration);
        next.middleware = this.middleware.slice();
        return next;
    }
};

function isBlob(value: any): value is Blob {
    return typeof Blob !== 'undefined' && value instanceof Blob;
}

function isFormData(value: any): value is FormData {
    return typeof FormData !== "undefined" && value instanceof FormData;
}

export class ResponseError extends Error {
    override name: "ResponseError" = "ResponseError";
    constructor(public response: Response, msg?: string) {
        super(msg);
    }
}

export class FetchError extends Error {
    override name: "FetchError" = "FetchError";
    constructor(public cause: Error, msg?: string) {
        super(msg);
    }
}

export class RequiredError extends Error {
    override name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

export type FetchAPI = WindowOrWorkerGlobalScope['fetch'];

export type Json = any;
export type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
export type HTTPHeaders = { [key: string]: string };
export type HTTPQuery = { [key: string]: string | number | null | boolean | Array<string | number | null | boolean> | Set<string | number | null | boolean> | HTTPQuery };
export type HTTPBody = Json | FormData | URLSearchParams;
export type HTTPRequestInit = { headers?: HTTPHeaders; method: HTTPMethod; credentials?: RequestCredentials; body?: HTTPBody };
export type ModelPropertyNaming = 'camelCase' | 'snake_case' | 'PascalCase' | 'original';

export type InitOverrideFunction = (requestContext: { init: HTTPRequestInit, context: RequestOpts }) => Promise<RequestInit>

export interface FetchParams {
    url: string;
    init: RequestInit;
}

export interface RequestOpts {
    path: string;
    method: HTTPMethod;
    headers: HTTPHeaders;
    query?: HTTPQuery;
    body?: HTTPBody;
}

export function querystring(params: HTTPQuery, prefix: string = ''): string {
    return Object.keys(params)
        .map(key => querystringSingleKey(key, params[key], prefix))
        .filter(part => part.length > 0)
        .join('&');
}

function querystringSingleKey(key: string, value: string | number | null | undefined | boolean | Array<string | number | null | boolean> | Set<string | number | null | boolean> | HTTPQuery, keyPrefix: string = ''): string {
    const fullKey = keyPrefix + (keyPrefix.length ? `[${key}]` : key);
    if (value instanceof Array) {
        const multiValue = value.map(singleValue => encodeURIComponent(String(singleValue)))
            .join(`&${encodeURIComponent(fullKey)}=`);
        return `${encodeURIComponent(fullKey)}=${multiValue}`;
    }
    if (value instanceof Set) {
        const valueAsArray = Array.from(value);
        return querystringSingleKey(key, valueAsArray, keyPrefix);
    }
    if (value instanceof Date) {
        return `${encodeURIComponent(fullKey)}=${encodeURIComponent(value.toISOString())}`;
    }
    if (value instanceof Object) {
        return querystring(value as HTTPQuery, fullKey);
    }
    return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;
}

export function mapValues(data: any, fn: (item: any) => any) {
  return Object.keys(data).reduce(
    (acc, key) => ({ ...acc, [key]: fn(data[key]) }),
    {}
  );
}

export function canConsumeForm(consumes: Consume[]): boolean {
    for (const consume of consumes) {
        if ('multipart/form-data' === consume.contentType) {
            return true;
        }
    }
    return false;
}

export interface Consume {
    contentType: string;
}

export interface RequestContext {
    fetch: FetchAPI;
    url: string;
    init: RequestInit;
}

export interface ResponseContext {
    fetch: FetchAPI;
    url: string;
    init: RequestInit;
    response: Response;
}

export interface ErrorContext {
    fetch: FetchAPI;
    url: string;
    init: RequestInit;
    error: unknown;
    response?: Response;
}

export interface Middleware {
    pre?(context: RequestContext): Promise<FetchParams | void>;
    post?(context: ResponseContext): Promise<Response | void>;
    onError?(context: ErrorContext): Promise<Response | void>;
}

export interface ApiResponse<T> {
    raw: Response;
    value(): Promise<T>;
}

export interface ResponseTransformer<T> {
    (json: any): T;
}

export class JSONApiResponse<T> {
    constructor(public raw: Response, private transformer: ResponseTransformer<T> = (jsonValue: any) => jsonValue) {}

    async value(): Promise<T> {
        return this.transformer(await this.raw.json());
    }
}

export class VoidApiResponse {
    constructor(public raw: Response) {}

    async value(): Promise<void> {
        return undefined;
    }
}

export class BlobApiResponse {
    constructor(public raw: Response) {}

    async value(): Promise<Blob> {
        return await this.raw.blob();
    };
}

export class TextApiResponse {
    constructor(public raw: Response) {}

    async value(): Promise<string> {
        return await this.raw.text();
    };
}

================
File: src/lib/api.ts
================
import { Configuration, AuthenticationApi, SystemApi, UserApi } from '$lib/api-client';

const config = new Configuration({
    basePath: import.meta.env.VITE_API_BASE_PATH,
});

export const authApi = new AuthenticationApi(config);
export const systemApi = new SystemApi(config);
export const userApi = new UserApi(config);

================
File: src/lib/index.ts
================
// place files you want to import through the `$lib` alias in this folder.

================
File: src/routes/auth/+page.svelte
================
<script lang="ts">
	import { authApi } from '$lib/api';
	import { LoginRequestFromJSON, ResponseError, SignupRequestFromJSON } from '$lib/api-client';

	let isSignUp = false;

	function toggleAuthMode() {
		isSignUp = !isSignUp;
	}

	let name = '';
	let email = '';
	let password = '';
	let error = '';

	const signin = async () => {
		try {
			const loginRequest = LoginRequestFromJSON({ username: email, password });
			await authApi.loginPost({ loginRequest });
			// Handle successful sign in
		} catch (err) {
			if (err instanceof ResponseError) {
				const responseText = await err.response.text();
				try {
					const errorContext = JSON.parse(responseText);
					error = errorContext.error || 'An error occurred during sign in.';
				} catch {
					error = responseText || 'An error occurred during sign in.';
				}
			} else {
				error = 'An unexpected error occurred.';
			}
		}
	};

	const signup = async () => {
		try {
			const signupRequest = SignupRequestFromJSON({ name, username: email, password });
			await authApi.signupPost({ signupRequest });
			// Handle successful sign up
		} catch (err) {
			if (err instanceof ResponseError) {
				const responseText = await err.response.text();
				try {
					const errorContext = JSON.parse(responseText);
					error = errorContext.error || 'An error occurred during sign up.';
				} catch {
					error = responseText || 'An error occurred during sign up.';
				}
			} else {
				error = 'An unexpected error occurred.';
			}
		}
	};
</script>

<div class="flex min-h-screen items-center justify-center bg-gray-100">
	<div class="w-full max-w-md rounded-lg bg-white p-8 shadow-lg">
		<h2 class="mb-6 text-center text-2xl font-bold">
			{#if isSignUp}
				Sign Up
			{:else}
				Sign In
			{/if}
		</h2>
		{#if error}
			<div class="mb-4 text-red-500">
				{error}
			</div>
		{/if}
		<form>
			{#if isSignUp}
				<div class="mb-4">
					<label class="mb-2 block text-sm font-bold text-gray-700" for="name">Name</label>
					<input
						class="focus:shadow-outline w-full appearance-none rounded border px-3 py-2 leading-tight text-gray-700 shadow focus:outline-none"
						id="name"
						type="text"
						placeholder="Name"
						bind:value={name}
					/>
				</div>
			{/if}
			<div class="mb-4">
				<label class="mb-2 block text-sm font-bold text-gray-700" for="email">Email</label>
				<input
					class="focus:shadow-outline w-full appearance-none rounded border px-3 py-2 leading-tight text-gray-700 shadow focus:outline-none"
					id="email"
					type="email"
					placeholder="Email"
					bind:value={email}
				/>
			</div>
			<div class="mb-6">
				<label class="mb-2 block text-sm font-bold text-gray-700" for="password">Password</label>
				<input
					class="focus:shadow-outline mb-3 w-full appearance-none rounded border px-3 py-2 leading-tight text-gray-700 shadow focus:outline-none"
					id="password"
					type="password"
					placeholder="Password"
					bind:value={password}
				/>
			</div>
			<div class="flex items-center justify-between">
				<button
					class="focus:shadow-outline rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700 focus:outline-none"
					type="button"
					on:click={isSignUp ? signup : signin}
				>
					{#if isSignUp}
						Sign Up
					{:else}
						Sign In
					{/if}
				</button>
				<button
					class="inline-block cursor-pointer align-baseline text-sm font-bold text-blue-500 hover:text-blue-800"
					on:click={toggleAuthMode}
				>
					{#if isSignUp}
						Already have an account? Sign In
					{:else}
						Don't have an account? Sign Up
					{/if}
				</button>
			</div>
		</form>
	</div>
</div>

================
File: src/routes/auth/+page.ts
================
import type { PageLoad } from './$types';

export const load: PageLoad = async ({ parent }) => {
    await parent();
    return {};
};

================
File: src/routes/+layout.svelte
================
<script lang="ts">
	import '../app.css';
	let { children } = $props();
</script>

{@render children()}

================
File: src/routes/+page.svelte
================
<h1>Welcome to SvelteKit</h1>
<p>Visit <a href="https://svelte.dev/docs/kit">svelte.dev/docs/kit</a> to read the documentation</p>

================
File: src/routes/+page.ts
================
import { systemApi, userApi } from '$lib/api';

export async function load() {
    try {
        // For example, using the ping endpoint from SystemApi
        const data = await systemApi.pingGet();
        return {
            data
        };
    } catch (error) {
        console.error('API Error:', error);
        throw error;
    }
}

================
File: src/app.css
================
@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';

================
File: src/app.d.ts
================
// See https://svelte.dev/docs/kit/types#app.d.ts
// for information about these interfaces
declare global {
	namespace App {
		// interface Error {}
		// interface Locals {}
		// interface PageData {}
		// interface PageState {}
		// interface Platform {}
	}
}

export {};

================
File: src/app.html
================
<!doctype html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" href="%sveltekit.assets%/favicon.png" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		%sveltekit.head%
	</head>
	<body data-sveltekit-preload-data="hover">
		<div style="display: contents">%sveltekit.body%</div>
	</body>
</html>

================
File: .dockerignore
================
node_modules

# Output
.output
.vercel
/.svelte-kit
/build

# OS
.DS_Store
Thumbs.db

# Env
.env
.env.*
!.env.example
!.env.test

# Vite
vite.config.js.timestamp-*
vite.config.ts.timestamp-*

================
File: .gitignore
================
node_modules

# Output
.output
.vercel
/.svelte-kit
/build

# OS
.DS_Store
Thumbs.db

# Env
.env
.env.*
!.env.example
!.env.test

# Vite
vite.config.js.timestamp-*
vite.config.ts.timestamp-*

================
File: .npmrc
================
engine-strict=true

================
File: .prettierignore
================
# Package Managers
package-lock.json
pnpm-lock.yaml
yarn.lock

================
File: .prettierrc
================
{
	"useTabs": true,
	"singleQuote": true,
	"trailingComma": "none",
	"printWidth": 100,
	"plugins": ["prettier-plugin-svelte", "prettier-plugin-tailwindcss"],
	"overrides": [
		{
			"files": "*.svelte",
			"options": {
				"parser": "svelte"
			}
		}
	]
}

================
File: eslint.config.js
================
import prettier from 'eslint-config-prettier';
import js from '@eslint/js';
import svelte from 'eslint-plugin-svelte';
import globals from 'globals';
import ts from 'typescript-eslint';

export default ts.config(
	js.configs.recommended,
	...ts.configs.recommended,
	...svelte.configs['flat/recommended'],
	prettier,
	...svelte.configs['flat/prettier'],
	{
		languageOptions: {
			globals: {
				...globals.browser,
				...globals.node
			}
		}
	},
	{
		files: ['**/*.svelte'],

		languageOptions: {
			parserOptions: {
				parser: ts.parser
			}
		}
	},
	{
		ignores: ['build/', '.svelte-kit/', 'dist/']
	}
);

================
File: openapitools.json
================
{
  "$schema": "./node_modules/@openapitools/openapi-generator-cli/config.schema.json",
  "spaces": 2,
  "generator-cli": {
    "version": "7.9.0"
  }
}

================
File: package.json
================
{
	"name": "meal-front",
	"version": "0.0.1",
	"type": "module",
	"engines": {
		"node": ">=20"
	},
	"scripts": {
		"dev": "vite dev",
		"build": "vite build",
		"preview": "vite preview",
		"check": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json",
		"check:watch": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch",
		"format": "prettier --write .",
		"lint": "prettier --check . && eslint .",
		"generate-client": "openapi-generator-cli generate -i ../api/swagger.yaml -g typescript-fetch -o src/lib/api-client",
		"start": "node ./build/index.js"
	},
	"devDependencies": {
		"@sveltejs/adapter-auto": "^3.0.0",
		"@sveltejs/adapter-node": "^5.2.9",
		"@sveltejs/kit": "^2.0.0",
		"@sveltejs/vite-plugin-svelte": "^4.0.0",
		"@tailwindcss/aspect-ratio": "^0.4.2",
		"@tailwindcss/container-queries": "^0.1.1",
		"@tailwindcss/forms": "^0.5.9",
		"@tailwindcss/typography": "^0.5.15",
		"@types/eslint": "^9.6.0",
		"autoprefixer": "^10.4.20",
		"eslint": "^9.7.0",
		"eslint-config-prettier": "^9.1.0",
		"eslint-plugin-svelte": "^2.36.0",
		"globals": "^15.0.0",
		"prettier": "^3.3.2",
		"prettier-plugin-svelte": "^3.2.6",
		"prettier-plugin-tailwindcss": "^0.6.5",
		"svelte": "^5.0.0",
		"svelte-check": "^4.0.0",
		"tailwindcss": "^3.4.9",
		"typescript": "^5.0.0",
		"typescript-eslint": "^8.0.0",
		"vite": "^5.0.3"
	}
}

================
File: postcss.config.js
================
export default {
	plugins: {
		tailwindcss: {},
		autoprefixer: {}
	}
};

================
File: README.md
================
# sv

Everything you need to build a Svelte project, powered by [`sv`](https://github.com/sveltejs/cli).

## Creating a project

If you're seeing this, you've probably already done this step. Congrats!

```bash
# create a new project in the current directory
npx sv create

# create a new project in my-app
npx sv create my-app
```

## Developing

Once you've created a project and installed dependencies with `npm install` (or `pnpm install` or `yarn`), start a development server:

```bash
npm run dev

# or start the server and open the app in a new browser tab
npm run dev -- --open
```

## Building

To create a production version of your app:

```bash
npm run build
```

You can preview the production build with `npm run preview`.

> To deploy your app, you may need to install an [adapter](https://svelte.dev/docs/kit/adapters) for your target environment.

================
File: svelte.config.js
================
import adapter from '@sveltejs/adapter-node';
import { vitePreprocess } from '@sveltejs/vite-plugin-svelte';

/** @type {import('@sveltejs/kit').Config} */
const config = {
	// Consult https://svelte.dev/docs/kit/integrations
	// for more information about preprocessors
	preprocess: vitePreprocess(),

	kit: {
		// adapter-auto only supports some environments, see https://svelte.dev/docs/kit/adapter-auto for a list.
		// If your environment is not supported, or you settled on a specific environment, switch out the adapter.
		// See https://svelte.dev/docs/kit/adapters for more information about adapters.
		adapter: adapter()
	}
};

export default config;

================
File: tailwind.config.ts
================
import aspectRatio from '@tailwindcss/aspect-ratio';
import containerQueries from '@tailwindcss/container-queries';
import forms from '@tailwindcss/forms';
import typography from '@tailwindcss/typography';
import type { Config } from 'tailwindcss';

export default {
	content: ['./src/**/*.{html,js,svelte,ts}'],

	theme: {
		extend: {}
	},

	plugins: [typography, forms, containerQueries, aspectRatio]
} satisfies Config;

================
File: tsconfig.json
================
{
	"extends": "./.svelte-kit/tsconfig.json",
	"compilerOptions": {
		"allowJs": true,
		"checkJs": true,
		"esModuleInterop": true,
		"forceConsistentCasingInFileNames": true,
		"resolveJsonModule": true,
		"skipLibCheck": true,
		"sourceMap": true,
		"strict": true,
		"moduleResolution": "bundler"
	}
	// Path aliases are handled by https://svelte.dev/docs/kit/configuration#alias
	// except $lib which is handled by https://svelte.dev/docs/kit/configuration#files
	//
	// If you want to overwrite includes/excludes, make sure to copy over the relevant includes/excludes
	// from the referenced tsconfig.json - TypeScript does not merge them in
}

================
File: vite.config.ts
================
import { sveltekit } from '@sveltejs/kit/vite';
import { defineConfig } from 'vite';

export default defineConfig({
	plugins: [sveltekit()]
});
